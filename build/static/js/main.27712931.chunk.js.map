{"version":3,"sources":["Menu/Subjects/Subjects.module.css","Menu/Menu.module.css","Menu/Subjects/Maths/Maths.module.css","Menu/Subjects/Physics/Physics.module.css","Menu/Subjects/History/History.module.css","Menu/Subjects/Chemistry/Chemistry.module.css","Menu/Subjects/Subjects.jsx","Menu/Menu.jsx","Menu/Subjects/Maths/Maths.jsx","Menu/Subjects/Physics/Physics.jsx","Menu/Subjects/History/History.jsx","Menu/Subjects/Chemistry/Chemistry.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Subjects","props","className","css","title","text","to","path","Menu","menu","Maths","wrapper","Physics","History","Chemistry","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,KAAO,yB,sBCAzDD,EAAOC,QAAU,CAAC,KAAO,qB,iBCAzBD,EAAOC,QAAU,CAAC,QAAU,yB,gBCA5BD,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,QAAU,6B,6MCebC,EAZE,SAACC,GACd,OACI,yBAAKC,UAAWC,IAAIC,OAChB,yBAAKF,UAAWC,IAAIC,OAChB,yBAAKF,UAAWC,IAAIE,MAChB,kBAAC,IAAD,CAASC,GAAIL,EAAMM,MAAQN,EAAMG,WCMtCI,EAXF,WACT,OACI,yBAAKN,UAAWC,IAAIM,MAChB,kBAAC,EAAD,CAAUL,MAAM,+DAAaG,KAAK,UAClC,kBAAC,EAAD,CAAUH,MAAM,uCAASG,KAAK,YAC9B,kBAAC,EAAD,CAAUH,MAAM,6CAAUG,KAAK,YAC/B,kBAAC,EAAD,CAAUH,MAAM,iCAAQG,KAAK,gB,wBCC1BG,EARD,WACV,OACI,yBAAKR,UAAWC,IAAIQ,SAApB,iE,iBCMOC,EARC,WACZ,OACI,yBAAKV,UAAWC,IAAIQ,SAApB,yC,iBCMOE,EARC,WACZ,OACI,yBAAKX,UAAWC,IAAIQ,SAApB,+C,iBCMOG,EARG,WACd,OACI,yBAAKZ,UAAWC,IAAIQ,SAApB,mCCmBOI,MAff,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACT,KAAK,SAASU,UAAWP,IACtC,kBAAC,IAAD,CAAOM,OAAK,EAACT,KAAK,WAAWU,UAAWL,IACxC,kBAAC,IAAD,CAAOI,OAAK,EAACT,KAAK,WAAWU,UAAWJ,IACxC,kBAAC,IAAD,CAAOG,OAAK,EAACT,KAAK,aAAaU,UAAWH,IAC1C,yBAAKZ,UAAU,QAAf,eCNYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27712931.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Subjects_title__1ktQZ\",\"text\":\"Subjects_text___kiFT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__nN2sZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Maths_wrapper__2ktpP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Physics_wrapper__VLptX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"History_wrapper__2fQ_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Chemistry_wrapper__2g82V\"};","import React from 'react'\nimport css from './Subjects.module.css'\nimport { NavLink } from 'react-router-dom'\n\nconst Subjects = (props) => {\n    return (\n        <div className={css.title}>\n            <div className={css.title}>\n                <div className={css.text}>\n                    <NavLink to={props.path} >{props.title}</NavLink>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Subjects;","import React from 'react'\nimport css from './Menu.module.css'\nimport Subjects from './Subjects/Subjects'\n\nconst Menu = () => {\n    return (\n        <div className={css.menu}>\n            <Subjects title='Математика' path='maths'/>\n            <Subjects title='Физика' path='physics'/>\n            <Subjects title='История' path='history'/>\n            <Subjects title='Химия' path='chemistry'/>\n        </div>\n    );\n}\n\nexport default Menu;","import React from 'react'\nimport css from './Maths.module.css'\n\nconst Maths = () => {\n    return (\n        <div className={css.wrapper}>\n            Математика\n        </div>\n    );\n}\n\nexport default Maths;","import React from 'react'\nimport css from './Physics.module.css'\n\nconst Physics = () => {\n    return (\n        <div className={css.wrapper}>\n           Физика\n        </div>\n    );\n}\n\nexport default Physics;","import React from 'react'\nimport css from './History.module.css'\n\nconst History = () => {\n    return (\n        <div className={css.wrapper}>\n            История\n        </div>\n    );\n}\n\nexport default History;","import React from 'react'\nimport css from './Chemistry.module.css'\n\nconst Chemistry = () => {\n    return (\n        <div className={css.wrapper}>\n            Химия\n        </div>\n    );\n}\n\nexport default Chemistry;","import React from 'react';\nimport './App.css';\nimport Menu from './Menu/Menu';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Maths from './Menu/Subjects/Maths/Maths';\nimport Physics from './Menu/Subjects/Physics/Physics';\nimport History from './Menu/Subjects/History/History';\nimport Chemistry from './Menu/Subjects/Chemistry/Chemistry';\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n        <Menu />\n        <Route exact path='/maths' component={Maths} />\n        <Route exact path='/physics' component={Physics} />\n        <Route exact path='/history' component={History} />\n        <Route exact path='/chemistry' component={Chemistry} />\n        <div className='text'>Formulas</div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}